pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-2'
        ECR_REPO_NAME = 'fittbot/backend'
        ECR_REGISTRY = '182399696098.dkr.ecr.ap-south-2.amazonaws.com/fittbot/backend'
        GITHUB_REPO = 'https://github.com/Diigambar-kare/ecs-deployment.git'
        IMAGE_TAG = 'latest'
        ECS_CLUSTER_NAME = 'test-cluster1'
        ECS_SERVICE_NAME = 'python-service'
        TASK_FAMILY = 'python-task'
        TASK_ROLE_ARN = 'arn:aws:iam::182399696098:role/ecsTaskRole'
        EXECUTION_ROLE_ARN = 'arn:aws:iam::182399696098:role/ecsTaskExecutionRole'
        VPC_ID = 'vpc-01492ba4565811e72'
        SUBNETS = 'subnet-051d12c8ab62abfe9,subnet-0a048e1c80b3a77ae'
        LISTENER_ARN = 'arn:aws:elasticloadbalancing:ap-south-2:182399696098:listener/app/ecs-code-deploy-lb/86f740f078924c1d/685768325bb648df'
        TARGET_GROUP_BLUE_NAME = 'ecs-blue-tg-ip'
        TARGET_GROUP_GREEN_NAME = 'ecs-green-tg-ip'
        LOAD_BALANCER_NAME = 'ecs-code-deploy-lb'
        CONTAINER_NAME = 'python-container'
        CONTAINER_PORT = '8080'
        CODEDEPLOY_APP_NAME = 'Mycode'
        CODEDEPLOY_GROUP_NAME = 'my-codeDeploy-group'
        SERVICE_ROLE_ARN = 'arn:aws:iam::182399696098:role/code-diploy-role'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws sts get-caller-identity
                        docker build -t ${ECR_REGISTRY}:${IMAGE_TAG} .
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker push ${ECR_REGISTRY}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Register ECS Task Definition') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws ecs register-task-definition \
                        --family ${TASK_FAMILY} \
                        --network-mode awsvpc \
                        --execution-role-arn ${EXECUTION_ROLE_ARN} \
                        --task-role-arn ${TASK_ROLE_ARN} \
                        --requires-compatibilities FARGATE \
                        --cpu "256" \
                        --memory "512" \
                        --container-definitions '[{
                            "name": "${CONTAINER_NAME}",
                            "image": "${ECR_REGISTRY}:${IMAGE_TAG}",
                            "essential": true,
                            "memory": 512,
                            "cpu": 256,
                            "portMappings": [{
                                "containerPort": ${CONTAINER_PORT},
                                "hostPort": ${CONTAINER_PORT},
                                "protocol": "tcp"
                            }]
                        }]' \
                        --region ${AWS_REGION}
                        """
                    }
                }
            }
        }

        stage('Create ECS Service') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws ecs create-service \
                        --cluster ${ECS_CLUSTER_NAME} \
                        --service-name ${ECS_SERVICE_NAME} \
                        --task-definition ${TASK_FAMILY} \
                        --desired-count 1 \
                        --launch-type FARGATE \
                        --deployment-controller '{"type": "CODE_DEPLOY"}' \
                        --network-configuration "awsvpcConfiguration={subnets=[subnet-051d12c8ab62abfe9,subnet-0a048e1c80b3a77ae],securityGroups=[sg-0f119db93630df7d6],assignPublicIp=ENABLED}" \
                        --load-balancers '[{"targetGroupArn":"arn:aws:elasticloadbalancing:ap-south-2:182399696098:targetgroup/ecs-blue-tg-ip/253fa61978743be8","containerName":"${CONTAINER_NAME}","containerPort":${CONTAINER_PORT}}]' \
                        --region ${AWS_REGION}
                        """
                    }
                }
            }
        }

        stage('Create CodeDeploy Deployment Group') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws deploy create-deployment-group \
                        --application-name ${CODEDEPLOY_APP_NAME} \
                        --deployment-group-name ${CODEDEPLOY_GROUP_NAME} \
                        --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
                        --service-role-arn ${SERVICE_ROLE_ARN} \
                        --blue-green-deployment-configuration '{
                            "terminateBlueInstancesOnDeploymentSuccess": {
                                "action": "TERMINATE",
                                "terminationWaitTimeInMinutes": 5
                            },
                            "deploymentReadyOption": {
                                "actionOnTimeout": "CONTINUE_DEPLOYMENT"
                            }
                        }' \
                        --deployment-style '{
                            "deploymentType": "BLUE_GREEN",
                            "deploymentOption": "WITH_TRAFFIC_CONTROL"
                        }' \
                        --ecs-services clusterName=${ECS_CLUSTER_NAME},serviceName=${ECS_SERVICE_NAME} \
                        --load-balancer-info '{
                            "targetGroupPairInfoList": [
                                {
                                    "targetGroups": [
                                        {"name": "${TARGET_GROUP_BLUE_NAME}"},
                                        {"name": "${TARGET_GROUP_GREEN_NAME}"}
                                    ],
                                    "prodTrafficRoute": {
                                        "listenerArns": ["${LISTENER_ARN}"]
                                    }
                                }
                            ]
                        }' \
                        --region ${AWS_REGION}
                        """
                    }
                }
            }
        }
    }
}
