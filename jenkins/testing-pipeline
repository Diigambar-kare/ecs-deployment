pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-2'
        ECR_REPO_NAME = 'fittbot/backend'
        ECR_REGISTRY = '182399696098.dkr.ecr.ap-south-2.amazonaws.com/fittbot/backend'
        GITHUB_REPO = 'https://github.com/Diigambar-kare/ecs-deployment.git'
        IMAGE_TAG = 'blue-deployment-test-new'
        ECS_CLUSTER_NAME = 'test-cluster1'
        ECS_SERVICE_NAME = 'blue-deployment-service'
        TASK_FAMILY = 'blue-task'
        TASK_ROLE_ARN = 'arn:aws:iam::182399696098:role/ecsTaskRole'
        EXECUTION_ROLE_ARN = 'arn:aws:iam::182399696098:role/ecsTaskExecutionRole'
        VPC_ID = 'vpc-01492ba4565811e72'
        SUBNETS = 'subnet-051d12c8ab62abfe9,subnet-0a048e1c80b3a77ae'
        LISTENER_ARN = 'arn:aws:elasticloadbalancing:ap-south-2:182399696098:listener/app/dig-test-lb/0d7a148137ab0033/f5f13bb5bcaede0f'
        TARGET_GROUP_BLUE_NAME = 'blue-dig-tg'
        TARGET_GROUP_GREEN_NAME = 'green-dig-tg'
        CODEDEPLOY_APP_NAME = 'AppECS-test-cluster1-blue-deployment-service-new'
        CODEDEPLOY_GROUP_NAME = 'DgpECS-test-cluster1-blue-deployment-service-new'
        SERVICE_ROLE_ARN = 'arn:aws:iam::182399696098:role/code-deploy-ecs'
        DOCKERFILE_PATH = 'blue-deployment/Dockerfile'
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker build -t ${ECR_REGISTRY}:${IMAGE_TAG} -f ${DOCKERFILE_PATH} blue-deployment
                        docker push ${ECR_REGISTRY}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Register ECS Task Definition') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws ecs register-task-definition \
                        --family ${TASK_FAMILY} \
                        --network-mode awsvpc \
                        --execution-role-arn ${EXECUTION_ROLE_ARN} \
                        --task-role-arn ${TASK_ROLE_ARN} \
                        --requires-compatibilities FARGATE \
                        --cpu "256" \
                        --memory "512" \
                        --container-definitions '[{"name": "${IMAGE_TAG}", "image": "${ECR_REGISTRY}:${IMAGE_TAG}", "essential": true, "memory": 512, "cpu": 256, "portMappings": [{"containerPort": 8000, "hostPort": 8000, "protocol": "tcp"}]}]'
                        """
                    }
                }
            }
        }

        stage('Fetch Latest Task Definition Revision') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        env.LATEST_TASK_DEF_ARN = sh(
                            script: "aws ecs describe-task-definition --task-definition ${TASK_FAMILY} --query 'taskDefinition.taskDefinitionArn' --output text",
                            returnStdout: true
                        ).trim()
                    }
                }
            }
        }

        stage('Trigger Deployment via CodeDeploy') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        echo "Creating JSON Config Files..."

                        cat > appspec.json <<EOF
                        {
                          "version": 0.0,
                          "Resources": [
                            {
                              "TargetService": {
                                "Type": "AWS::ECS::Service",
                                "Properties": {
                                  "TaskDefinition": "${env.LATEST_TASK_DEF_ARN}",
                                  "LoadBalancerInfo": {
                                    "ContainerName": "${IMAGE_TAG}",
                                    "ContainerPort": 8000
                                  }
                                }
                              }
                            }
                          ]
                        }
                        EOF

                        cat > deployment-config.json <<EOF
                        { "deploymentType": "BLUE_GREEN", "deploymentOption": "WITH_TRAFFIC_CONTROL" }
                        EOF

                        cat > blue-green-config.json <<EOF
                        { "terminateBlueInstancesOnDeploymentSuccess": { "action": "TERMINATE", "terminationWaitTimeInMinutes": 50 }, "deploymentReadyOption": { "actionOnTimeout": "CONTINUE_DEPLOYMENT" } }
                        EOF

                        cat > auto-rollback-config.json <<EOF
                        { "enabled": true, "events": ["DEPLOYMENT_FAILURE", "DEPLOYMENT_STOP_ON_ALARM", "DEPLOYMENT_STOP_ON_REQUEST"] }
                        EOF

                        cat > ecs-services.json <<EOF
                        [ { "clusterName": "${ECS_CLUSTER_NAME}", "serviceName": "${ECS_SERVICE_NAME}" } ]
                        EOF

                        cat > load-balancer-info.json <<EOF
                        { "targetGroupPairInfoList": [ { "targetGroups": [ {"name": "${TARGET_GROUP_BLUE_NAME}"}, {"name": "${TARGET_GROUP_GREEN_NAME}"} ], "prodTrafficRoute": { "listenerArns": ["${LISTENER_ARN}"] } } ] }
                        EOF

                        echo "Triggering AWS CodeDeploy deployment..."
                        aws deploy create-deployment \
                        --application-name "${CODEDEPLOY_APP_NAME}" \
                        --deployment-group-name "${CODEDEPLOY_GROUP_NAME}" \
                        --revision file://appspec.json \
                        --deployment-style file://deployment-config.json \
                        --blue-green-deployment-configuration file://blue-green-config.json \
                        --auto-rollback-configuration file://auto-rollback-config.json \
                        --ecs-services file://ecs-services.json \
                        --load-balancer-info file://load-balancer-info.json \
                        --region ${AWS_REGION}
                        """
                    }
                }
            }
        }
    }
}
