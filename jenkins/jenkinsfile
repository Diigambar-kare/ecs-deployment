pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-2'
        ECR_REPO_NAME = 'fittbot/backend'
        ECR_REGISTRY = '182399696098.dkr.ecr.ap-south-2.amazonaws.com/fittbot/backend'
        GITHUB_REPO = 'https://github.com/Diigambar-kare/ecs-deployment.git'
        IMAGE_TAG = 'latest'
        ECS_CLUSTER_NAME = 'test-cluster1'
        ECS_SERVICE_NAME = 'python-service'
        TASK_FAMILY = 'python-task'
        TASK_ROLE_ARN = 'arn:aws:iam::182399696098:role/ecsTaskRole'
        EXECUTION_ROLE_ARN = 'arn:aws:iam::182399696098:role/ecsTaskExecutionRole'
        VPC_ID = 'vpc-01492ba4565811e72'
        SUBNETS = 'subnet-051d12c8ab62abfe9,subnet-0a048e1c80b3a77ae'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: "${GITHUB_REPO}"
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws sts get-caller-identity
                        docker build -t ${ECR_REGISTRY}:${IMAGE_TAG} .
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REGISTRY}
                        docker push ${ECR_REGISTRY}:${IMAGE_TAG}
                        """
                    }
                }
            }
        }

        stage('Register ECS Task Definition') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        def taskDefinition = """
                        {
                            "family": "${TASK_FAMILY}",
                            "networkMode": "awsvpc",
                            "executionRoleArn": "${EXECUTION_ROLE_ARN}",
                            "taskRoleArn": "${TASK_ROLE_ARN}",
                            "requiresCompatibilities": ["FARGATE"],
                            "cpu": "256",
                            "memory": "512",
                            "containerDefinitions": [
                                {
                                    "name": "python-container",
                                    "image": "${ECR_REGISTRY}:${IMAGE_TAG}",
                                    "essential": true,
                                    "memory": 512,
                                    "cpu": 256,
                                    "portMappings": [
                                        {
                                            "containerPort": 8080,
                                            "hostPort": 8080,
                                            "protocol": "tcp"
                                        }
                                    ]
                                }
                            ]
                        }
                        """.stripIndent().trim()

                        writeFile file: 'task-definition.json', text: taskDefinition

                        sh "aws ecs register-task-definition --cli-input-json file://task-definition.json --region ${AWS_REGION}"
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                withAWS(credentials: 'aws-cred', region: "${AWS_REGION}") {
                    script {
                        sh """
                        aws ecs create-service --cluster ${ECS_CLUSTER_NAME} \
                        --service-name ${ECS_SERVICE_NAME} \
                        --task-definition ${TASK_FAMILY} \
                        --desired-count 1 \
                        --launch-type FARGATE \
                        --network-configuration '{
                            "awsvpcConfiguration": {
                                "subnets": ["subnet-051d12c8ab62abfe9", "subnet-0a048e1c80b3a77ae"],
                                "securityGroups": [],
                                "assignPublicIp": "ENABLED"
                            }
                        }' --region ${AWS_REGION}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo '✅ Deployment Successful!'
        }
        failure {
            echo '❌ Deployment Failed!'
        }
    }
}

